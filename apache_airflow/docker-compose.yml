services:
  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - network

  redis:
    image: redis:7.2-bookworm
    container_name: redis
    restart: always
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    networks:
      - network

  airflow-webserver:
    image: ${AIRFLOW_IMAGE_NAME}
    container_name: flow_webserver
    restart: always
    command: webserver
    ports:
      - "${AIRFLOW_WEBSERVER_PORT}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${AIRFLOW_WEBSERVER_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__RESULT_BACKEND=${db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}}
      - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${AIRFLOW_DAGS_ARE_PAUSED_AT_CREATION}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW_LOAD_EXAMPLES}
      - AIRFLOW__API__AUTH_BACKENDS=${AIRFLOW_AUTH_BACKENDS}
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=${AIRFLOW_SCHEDULER_ENABLE_HEALTH_CHECK}
      - _PIP_ADDITIONAL_REQUIREMENTS=${PIP_ADDITIONAL_REQUIREMENTS}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID}:0"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - network

  airflow-scheduler:
    image: ${AIRFLOW_IMAGE_NAME}
    container_name: flow_scheduler
    restart: always
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8793/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${AIRFLOW_DAGS_ARE_PAUSED_AT_CREATION}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW_LOAD_EXAMPLES}
      - AIRFLOW__API__AUTH_BACKENDS=${AIRFLOW_AUTH_BACKENDS}
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=${AIRFLOW_SCHEDULER_ENABLE_HEALTH_CHECK}
      - _PIP_ADDITIONAL_REQUIREMENTS=${PIP_ADDITIONAL_REQUIREMENTS}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID}:0"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - network

  airflow-worker:
    image: ${AIRFLOW_IMAGE_NAME}
    container_name: flow_worker
    restart: always
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${AIRFLOW_DAGS_ARE_PAUSED_AT_CREATION}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW_LOAD_EXAMPLES}
      - AIRFLOW__API__AUTH_BACKENDS=${AIRFLOW_AUTH_BACKENDS}
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=${AIRFLOW_SCHEDULER_ENABLE_HEALTH_CHECK}
      - _PIP_ADDITIONAL_REQUIREMENTS=${PIP_ADDITIONAL_REQUIREMENTS}
      - DUMB_INIT_SETSID="0"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID}:0"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - network

  airflow-triggerer:
    image: ${AIRFLOW_IMAGE_NAME}
    container_name: flow_triggerer
    command: triggerer
    restart: always
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${AIRFLOW_DAGS_ARE_PAUSED_AT_CREATION}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW_LOAD_EXAMPLES}
      - AIRFLOW__API__AUTH_BACKENDS=${AIRFLOW_AUTH_BACKENDS}
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=${AIRFLOW_SCHEDULER_ENABLE_HEALTH_CHECK}
      - _PIP_ADDITIONAL_REQUIREMENTS=${PIP_ADDITIONAL_REQUIREMENTS}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID}:0"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - network

  airflow-init:
    image: ${AIRFLOW_IMAGE_NAME}
    container_name: flow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow db init &&
        exec /entrypoint airflow users create \
          --username "${_AIRFLOW_WWW_USER_USERNAME}" \
          --firstname "${_AIRFLOW_WWW_USER_FIRSTNAME:-airflow}" \
          --lastname "${_AIRFLOW_WWW_USER_LASTNAME:-admin}" \
          --role Admin \
          --email "${_AIRFLOW_WWW_USER_EMAIL:-airflow@example.com}" \
          --password "${_AIRFLOW_WWW_USER_PASSWORD}"
    user: "0:0"
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${AIRFLOW_DAGS_ARE_PAUSED_AT_CREATION}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW_LOAD_EXAMPLES}
      - AIRFLOW__API__AUTH_BACKENDS=${AIRFLOW_AUTH_BACKENDS}
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=${AIRFLOW_SCHEDULER_ENABLE_HEALTH_CHECK}
      - _PIP_ADDITIONAL_REQUIREMENTS=${PIP_ADDITIONAL_REQUIREMENTS}
      - _AIRFLOW_DB_MIGRATE='true'
      - _AIRFLOW_WWW_USER_CREATE='true'
      - _AIRFLOW_WWW_USER_USERNAME=${AIRFLOW_WWW_USER_USERNAME}
      - _AIRFLOW_WWW_USER_PASSWORD=${AIRFLOW_WWW_USER_PASSWORD}
    volumes:
      - ./sources:/sources
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - network

  airflow-cli:
    image: ${AIRFLOW_IMAGE_NAME}
    container_name: flow_cli
    restart: always
    profiles:
      - debug
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${AIRFLOW_DAGS_ARE_PAUSED_AT_CREATION}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW_LOAD_EXAMPLES}
      - AIRFLOW__API__AUTH_BACKENDS=${AIRFLOW_AUTH_BACKENDS}
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=${AIRFLOW_SCHEDULER_ENABLE_HEALTH_CHECK}
      - _PIP_ADDITIONAL_REQUIREMENTS=${PIP_ADDITIONAL_REQUIREMENTS}
      - CONNECTION_CHECK_MAX_COUNT="0"
    command:
      - bash
      - -c
      - airflow
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - network

  flower:
    image: ${AIRFLOW_IMAGE_NAME}
    container_name: flow_flower
    command: celery flower
    ports:
      - "${FLOWER_PORT}:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${FLOWER_PORT}/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW_EXECUTOR}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      - AIRFLOW__CELERY__BROKER_URL=redis://:@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${AIRFLOW_DAGS_ARE_PAUSED_AT_CREATION}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW_LOAD_EXAMPLES}
      - AIRFLOW__API__AUTH_BACKENDS=${AIRFLOW_AUTH_BACKENDS}
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=${AIRFLOW_SCHEDULER_ENABLE_HEALTH_CHECK}
      - _PIP_ADDITIONAL_REQUIREMENTS=${PIP_ADDITIONAL_REQUIREMENTS}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - network

networks:
  network:
    name: airflow
    external: false
